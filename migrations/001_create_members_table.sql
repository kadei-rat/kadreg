-- Create members table for furry convention registration system
CREATE TYPE member_role AS ENUM ('Member', 'Staff', 'RegStaff', 'Director', 'Sysadmin');

CREATE TABLE members (
    membership_num INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email_address TEXT NOT NULL,
    legal_name TEXT NOT NULL,
    date_of_birth TEXT NOT NULL,
    handle TEXT NOT NULL,
    postal_address TEXT NOT NULL,
    phone_number TEXT NOT NULL,
    password_hash TEXT NOT NULL,
    role member_role NOT NULL DEFAULT 'Member',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP WITH TIME ZONE
);

-- Enforce uniqueness of email_address for non-deleted members
CREATE UNIQUE INDEX idx_members_email_active
    ON members (email_address)
    WHERE deleted_at IS NULL;

-- Efficiently list all members of a given role
CREATE INDEX idx_members_role ON members (role);

-- Automatically update updated_at column on row modification
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_members_updated_at
    BEFORE UPDATE ON members
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
